#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Optimizing of Kernel Density Estimator in Python
\end_layout

\begin_layout Author
Reynaldo Gil
\end_layout

\begin_layout Abstract
The work shows the results of creating and optimizing python code for computing
 a Kernel Density Estimator over objects of high dimensionality.
 The main result is an optimized library that takes advantages of the vector
 operation and multiprocessing capabilities of modern computers.
 Besides the application of this method to images was studied.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Kernel Density Estimation (KDE) is a non-parametric way to estimate the
 probability density function of a random variable (
\begin_inset CommandInset citation
LatexCommand cite
key "kde_wiki"
literal "false"

\end_inset

).
 It is very much related to histograms because using it, smoothing histograms
 can be obtained.
 In general, the technique allows to approximating a function at any point
 as the sum of kernel functions collocated in the points of known data.
 The kernel functions have parameters that can be optimized using a learning
 process.
 
\end_layout

\begin_layout Standard
In this work, the kernel selected is a Gaussian and the data are images
 from the standard databases Mnist (
\begin_inset CommandInset citation
LatexCommand cite
key "Mnist"
literal "false"

\end_inset

) and Cifar (
\begin_inset CommandInset citation
LatexCommand cite
key "Cifar10"
literal "false"

\end_inset

).
\end_layout

\begin_layout Section
Mathematical model
\end_layout

\begin_layout Standard
Given a collection of 
\begin_inset Formula $k$
\end_inset

 points 
\begin_inset Formula $z_{i}\in R^{d}$
\end_inset

 the log-likelihood of a point 
\begin_inset Formula $x\in R^{d}$
\end_inset

 can be expressed :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\log p(x)=\log\sum_{i=1}^{k}p(z_{i})p(x|z_{i})
\]

\end_inset


\end_layout

\begin_layout Standard
Assuming that 
\begin_inset Formula $p(z_{i})=\frac{1}{k}$
\end_inset

 and 
\begin_inset Formula $p(x|z_{i})$
\end_inset

 is described by the product of Gaussian components with the same 
\begin_inset Formula $\sigma$
\end_inset

 for each dimension:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
p(x_{j}|z_{i})=\frac{1}{\sigma\sqrt{2\pi}}e^{-\frac{(x_{j}-z_{ij})^{2}}{2\sigma^{2}}}
\]

\end_inset


\end_layout

\begin_layout Standard
Then:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\log p(x)=\log\sum_{i=1}^{k}\frac{1}{k(\sigma\sqrt{2\pi})^{d}}\prod_{j=1}^{d}e^{-\frac{(x_{j}-z_{ij})^{2}}{2\sigma^{2}}}
\]

\end_inset


\end_layout

\begin_layout Standard
Applying the exponential and logarithms rules this can be expressed as:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\log p(x)=-\log k-d\log\sigma-\frac{d}{2}\log2\pi+\log\sum_{i=1}^{k}e^{-\sum_{j=1}^{d}\frac{(x-z_{ij})^{2}}{2\sigma^{2}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\log p(x)=-\log k-d\log\sigma-\frac{d}{2}\log2\pi+\log\sum_{i=1}^{k}e^{-\frac{\left|x-z_{i}\right|^{2}}{2\sigma^{2}}}
\]

\end_inset


\end_layout

\begin_layout Standard
This is equivalent to:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\log p(x)=\log\sum_{i=1}^{k}e^{\log\frac{1}{k}-\sum_{j=1}^{d}\left\{ \frac{(x_{j-z_{ij})^{2}}}{2\sigmaÂ²}+\frac{1}{2}\log2\pi\sigma^{2}\right\} }
\]

\end_inset


\end_layout

\begin_layout Standard
Unless both formulas produce the same results, in the work is used the first
 one.
 On it, the computation that depends on the data vectors is small and separated
 from the computation that only depends on parameters and sizes, that need
 to be computed only one time.
 Therefore, it is a bit easier to optimize the code in this way.
\end_layout

\begin_layout Standard
Finally, for validate the result the average over another data is computed:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Q=\frac{1}{m}\sum_{i=1}^{m}\log p(x_{i})
\]

\end_inset


\end_layout

\begin_layout Subsection
Special formula
\end_layout

\begin_layout Standard
One problem we found was the computation of 
\begin_inset Formula $\log\sum_{i=1}^{k}e^{-\frac{\left|x-z_{i}\right|^{2}}{2\sigma^{2}}}$
\end_inset

 .
 When 
\begin_inset Formula $\sigma$
\end_inset

 is small and the vector have high dimensionality the exponent value is
 so much large.
 This and the limited resolution of the fixed point arithmetic cause the
 exponential return zero.
 One solution can be using a more resolution arithmetic, but they are slower.
 Fortunately, the problem can be solved more efficiently using LogSumExp
 (
\begin_inset CommandInset citation
LatexCommand cite
key "LogSumExp"
literal "false"

\end_inset

) This function set:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\log\sum e^{x_{i}}=\max(x_{i})+\log\sum e^{x_{i}-\max(x_{i})}
\]

\end_inset


\end_layout

\begin_layout Standard
Using it, the exponents are not big and the resolution problem doesn't happens.
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard
The implementation consists of one module named kde and the corresponding
 test module.
 There are 3 main programs: preprocessing.py that creates the requested data
 from the original, fit.py that finds the best 
\begin_inset Formula $\sigma$
\end_inset

 and apply.py that runs the best 
\begin_inset Formula $\sigma$
\end_inset

 found over the testing collection.
 Besides, there are two versions of the kde implementation using both formulas.
 Using it we can check that they coincide.
 In the root directory it is a Readme.md file that explains the steps to
 run the programs.
\end_layout

\begin_layout Standard
The interpreted and dynamic computation of python allows easy programming.
 However, the execution is very inefficient because every object uses a
 lot of additional memory and it is needed to check its type in execution
 time, among other problems.
 These problems increase with the data size.
 It is needed to avoid computation in Python to achieve better performance.
 Due to these problems, a lot of libraries implemented in C or other languages
 have been created.
 These libraries do the hard work and python works as the glue between them.
 In particular, numpy is the basic library for scientific computing.
 It implements vector operations that can be optimized for some architectures.
 
\end_layout

\begin_layout Standard
The first optimization was implementing all the operations that where possible
 using numpy functions over arrays.
 This avoid the overload python execution and can take advantage of the
 vector operation.
 For example the computation of 
\begin_inset Formula $\log\sum_{i=1}^{k}e^{-\frac{\left|x-z_{i}\right|^{2}}{2\sigma^{2}}}$
\end_inset

 was done using differences, maximum, norm, squares and division by scalar
 from numpy.
 One operation that is a lost of efficiency is compute the square of the
 norm because we needed to compute the norm and the squares but we did not
 found a way to avoid it.
 So, if this work need to be improved this is one point to a better implementati
on.
 Another improve that be done is the computation of the mapping, for example
 for map from the validation vector to 
\begin_inset Formula $\log$
\end_inset

p(x).
 That was implemented with a normal python call and reduce.
 This can be done in numpy but it is needed to create an ufunc, so with
 more time can be done too.
\end_layout

\begin_layout Standard
The second was parallelizing the code at a higher functional level.
 This algorithm has several levels of parallelism.
 In particular the terms of the sum in the quality function can be computed
 independently.
 For computing the validation or testing, the matrix is divided among the
 available processors using the multiprocessing library.
 Using these parallelism level was easy and achieve a high reduction of
 times.
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
First, the best value of 
\begin_inset Formula $\sigma$
\end_inset

 for each data was found.
 The result are shown in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Quality-again"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minist
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cifar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sigma$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Q
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.05
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-3208
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2489
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.08
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-635
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-554
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-131
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
230
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
347
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-234
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-296
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-741
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-962
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1051
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1368
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1272
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1658
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Quality again 
\begin_inset Formula $\sigma$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:Quality-again"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As can be seen, the better fit for both data is obtained when 
\begin_inset Formula $\sigma=0.2$
\end_inset

 and the quality improve while are more near the best value.
 There is one problem, why positive values are obtained? If we are computing
 log of probabilities the results must be negatives.
 I implemented both formula versions and the results were the same.
 Unless I have doubt about the absolute values, I think that the trend is
 clear.
 The optimized value of 
\begin_inset Formula $\sigma$
\end_inset

 is obtained when the kernel density estimation better adjusts with the
 validation data.
\end_layout

\begin_layout Standard
The experiments were running in an i7-8750 CPU with 6 cores, hyperthreading
 and 32 Gb and Linux.
 Numpy was using openblas library.
 The times for Minist were around 2 minutes for each 
\begin_inset Formula $\sigma$
\end_inset

 value with 8 cores.
 In Cifar were about 5 minutes.
 These is an expected behavior because Mnist images are black and white
 with a lot of ceros while Cifar is created by averaging color images and
 has a few zeros.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Times-again-cores"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the times for testing on each data with the best 
\begin_inset Formula $\sigma=0.$
\end_inset

2.
 Can be seen that the times decrease with the number of processor but not
 linearly.
 This behavior can be explained because unless the problem is embarrassing
 parallel several resources of the computer are shared like the caches of
 the CPU and the memory.
 Besides, the numpy fights for cores with the multiprocessing approach.
 Also the real cores are only 6, when are used more they share computations
 units too, therefore the performance can not improve the same.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename times.svg
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Time again cores
\begin_inset CommandInset label
LatexCommand label
name "fig:Times-again-cores"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
KDE on images
\end_layout

\begin_layout Standard
The kernel density estimation is a way to learn and reproduce some function,
 in particular in grey images can be used to learn the intensity on each
 point.
 For me have more sense if the points are considered in 
\begin_inset Formula $R^{2}$
\end_inset

 so the Gaussian in a point has more influence in its 
\begin_inset Formula $RÂ²$
\end_inset

 neighbors.
 For example 
\begin_inset CommandInset citation
LatexCommand cite
key "Pereira2015"
literal "false"

\end_inset

 uses KDE in the spatial domain for image segmentation.
\end_layout

\begin_layout Standard
Also, it must be used to learn one class, for example in Mnist learn using
 images of one number, because if not I don't understand what it is learned.
 With the corresponding estimation we can, for example, create an smoothing
 image of the average number.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "kde"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
